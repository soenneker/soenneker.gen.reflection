@page "/gettypegen-demo"
@using Soenneker.Gen.Reflection
@using System.Collections.Generic

<PageTitle>GetTypeGen Demo</PageTitle>

<h1>GetTypeGen Source Generator Demo</h1>

<p>This page demonstrates the GetTypeGen extension method usage in Razor components.</p>

<div class="demo-section">
    <h2>Basic Type Information</h2>
    
    <div class="type-info">
        <h3>String Type</h3>
        @{
            string testString = "Hello World";
            var stringTypeInfo = testString.GetTypeGen();
        }
        <p><strong>Type Name:</strong> @stringTypeInfo.Name</p>
        <p><strong>Full Name:</strong> @stringTypeInfo.FullName</p>
        <p><strong>Is Value Type:</strong> @stringTypeInfo.IsValueType</p>
        <p><strong>Is Reference Type:</strong> @stringTypeInfo.IsReferenceType</p>
    </div>

    <div class="type-info">
        <h3>Integer Type</h3>
        @{
            int testInt = 42;
            var intTypeInfo = testInt.GetTypeGen();
        }
        <p><strong>Type Name:</strong> @intTypeInfo.Name</p>
        <p><strong>Is Value Type:</strong> @intTypeInfo.IsValueType</p>
    </div>

    <div class="type-info">
        <h3>Generic Type (List&lt;string&gt;)</h3>
        @{
            var listTypeInfo = GetTypeGen<List<string>>();
        }
        <p><strong>Type Name:</strong> @listTypeInfo.Name</p>
        <p><strong>Is Generic:</strong> @listTypeInfo.IsGenericType</p>
        <p><strong>Generic Arguments:</strong> @listTypeInfo.GenericTypeArguments.Length</p>
    </div>
</div>

<div class="demo-section">
    <h2>Nullable Types</h2>
    
    <div class="type-info">
        <h3>Nullable Integer</h3>
        @{
            int? nullableInt = 100;
            var nullableTypeInfo = nullableInt.GetTypeGen();
        }
        <p><strong>Type Name:</strong> @nullableTypeInfo.Name</p>
        <p><strong>Is Nullable:</strong> @nullableTypeInfo.IsNullable</p>
        @if (nullableTypeInfo.UnderlyingType.HasValue)
        {
            <p><strong>Underlying Type:</strong> @nullableTypeInfo.UnderlyingType.Value.Name</p>
        }
    </div>
</div>

<div class="demo-section">
    <h2>Custom Types</h2>
    
    <div class="type-info">
        <h3>Person Class</h3>
        @{
            var person = new Person { Name = "John Doe", Age = 30 };
            var personTypeInfo = person.GetTypeGen();
        }
        <p><strong>Type Name:</strong> @personTypeInfo.Name</p>
        <p><strong>Is Reference Type:</strong> @personTypeInfo.IsReferenceType</p>
        <p><strong>Properties Count:</strong> @personTypeInfo.Properties.Length</p>
        <p><strong>Fields Count:</strong> @personTypeInfo.Fields.Length</p>
        <p><strong>Methods Count:</strong> @personTypeInfo.Methods.Length</p>
        
        <h4>Properties:</h4>
        <ul>
            @foreach (var prop in personTypeInfo.Properties)
            {
                <li>@prop.Name (@prop.PropertyType.Name) - Read: @prop.CanRead, Write: @prop.CanWrite</li>
            }
        </ul>
        
        <h4>Fields:</h4>
        <ul>
            @foreach (var field in personTypeInfo.Fields)
            {
                <li>@field.Name (@field.FieldType.Name) - ReadOnly: @field.IsReadOnly</li>
            }
        </ul>
    </div>
</div>

<div class="demo-section">
    <h2>Property and Field Access</h2>
    
    <div class="type-info">
        <h3>Dynamic Property Access</h3>
        @{
            var person2 = new Person { Name = "Jane Smith", Age = 25 };
            var person2TypeInfo = person2.GetTypeGen();
            var nameProperty = person2TypeInfo.GetProperty("Name");
        }
        
        @if (nameProperty.HasValue)
        {
            <p><strong>Name Property Value:</strong> @nameProperty.Value.GetValue(person2)</p>
            <p><strong>Property Type:</strong> @nameProperty.Value.PropertyType.Name</p>
        }
        
        @{
            var ageField = person2TypeInfo.GetField("Age");
        }
        
        @if (ageField.HasValue)
        {
            <p><strong>Age Field Value:</strong> @ageField.Value.GetValue(person2)</p>
            <p><strong>Field Type:</strong> @ageField.Value.FieldType.Name</p>
        }
    </div>
</div>

<div class="demo-section">
    <h2>Method Information</h2>
    
    <div class="type-info">
        <h3>Method Details</h3>
        @{
            var person3 = new Person { Name = "Bob Johnson", Age = 40 };
            var person3TypeInfo = person3.GetTypeGen();
            var toStringMethod = person3TypeInfo.GetMethod("ToString");
        }
        
        @if (toStringMethod.HasValue)
        {
            <p><strong>ToString Method Found:</strong> @toStringMethod.Value.Name</p>
            <p><strong>Return Type:</strong> @toStringMethod.Value.ReturnType.Name</p>
            <p><strong>Is Static:</strong> @toStringMethod.Value.IsStatic</p>
            <p><strong>Parameter Count:</strong> @toStringMethod.Value.ParameterTypes.Length</p>
        }
    </div>
</div>

<div class="demo-section">
    <h2>Complex Nested Types</h2>
    
    <div class="type-info">
        <h3>Company with Employees</h3>
        @{
            var company = new Company
            {
                Name = "Tech Corp",
                Employees = new List<Person>
                {
                    new Person { Name = "Employee 1", Age = 30 },
                    new Person { Name = "Employee 2", Age = 25 }
                },
                FoundedDate = DateTime.Now.AddYears(-5)
            };
            var companyTypeInfo = company.GetTypeGen();
        }
        
        <p><strong>Company Type:</strong> @companyTypeInfo.Name</p>
        <p><strong>Properties:</strong></p>
        <ul>
            @foreach (var prop in companyTypeInfo.Properties)
            {
                <li>@prop.Name (@prop.PropertyType.Name)</li>
            }
        </ul>
        
        @{
            var employeesProperty = companyTypeInfo.GetProperty("Employees");
        }
        
        @if (employeesProperty.HasValue)
        {
            <p><strong>Employees Property Type:</strong> @employeesProperty.Value.PropertyType.Name</p>
            <p><strong>Is Generic:</strong> @employeesProperty.Value.PropertyType.IsGenericType</p>
        }
    </div>
</div>

<style>
    .demo-section {
        margin: 20px 0;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    
    .type-info {
        margin: 10px 0;
        padding: 10px;
        background-color: #f9f9f9;
        border-radius: 3px;
    }
    
    h2 {
        color: #333;
        border-bottom: 2px solid #007bff;
        padding-bottom: 5px;
    }
    
    h3 {
        color: #555;
        margin-top: 15px;
    }
    
    h4 {
        color: #666;
        margin-top: 10px;
    }
    
    ul {
        margin: 5px 0;
        padding-left: 20px;
    }
    
    li {
        margin: 2px 0;
    }
    
    strong {
        color: #007bff;
    }
</style>

@code {
    // Sample classes for demonstration
    public class Person
    {
        public string Name { get; set; } = string.Empty;
        public int Age { get; set; }
        private readonly string _id = Guid.NewGuid().ToString();

        public override string ToString()
        {
            return $"{Name} ({Age})";
        }
    }

    public class Company
    {
        public string Name { get; set; } = string.Empty;
        public List<Person> Employees { get; set; } = new();
        public DateTime FoundedDate { get; set; }
    }
}

