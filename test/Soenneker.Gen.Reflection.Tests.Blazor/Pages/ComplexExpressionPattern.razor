@page "/complex-expression-pattern"
@rendermode InteractiveWebAssembly

<PageTitle>Complex Expression Pattern Test</PageTitle>

<h1>Complex Expression Pattern Test</h1>

<button class="btn btn-primary" @onclick="TestComplexExpressionPattern">Test Complex Expression Pattern</button>

@code {
    private ExternalSourceDto _source = new ExternalSourceDto 
    { 
        Id = "complex-expr"
    };

    private void TestComplexExpressionPattern()
    {
        // Pattern: Adapt calls in complex expressions with method chaining
        var chainedResult = GetSource()
            .Adapt<ExternalDestDto>();
        
        // Pattern: Adapt calls after other operations
        ExternalSourceDto tempSource = _source;
        var adaptedAfterAssignment = tempSource.Adapt<ExternalDestDto>();
        
        // Pattern: Adapt calls in string interpolation
        var interpolatedResult = $"Result: {_source.Adapt<ExternalDestDto>().Id}";
        
        // Pattern: Adapt calls in conditional expressions with multiple conditions
        bool condition1 = _source.Id.Length > 5;
        bool condition2 = !string.IsNullOrEmpty(_source.Id);
        ExternalDestDto conditionalAdapted = (condition1 && condition2) 
            ? _source.Adapt<ExternalDestDto>() 
            : new ExternalDestDto { Id = "default" };
        
        // Pattern: Adapt calls in switch expressions
        ExternalDestDto switchAdapted = _source.Id switch
        {
            "complex-expr" => _source.Adapt<ExternalDestDto>(),
            "other" => _source.Adapt<ExternalDestDto>(),
            _ => new ExternalDestDto { Id = "fallback" }
        };
        
        // Pattern: Adapt calls in nested method calls
        string nestedMethodResult = ProcessAdapt(GetSource().Adapt<ExternalDestDto>());
        
        // Pattern: Adapt calls with null-conditional and null-coalescing
        ExternalSourceDto? nullableSource = _source;
        ExternalDestDto nullConditionalResult = nullableSource?.Adapt<ExternalDestDto>() ?? new ExternalDestDto { Id = "null-fallback" };
    }
    
    private ExternalSourceDto GetSource()
    {
        return _source;
    }
    
    private string ProcessAdapt(ExternalDestDto adapted)
    {
        return adapted.Id + "-processed";
    }
}
